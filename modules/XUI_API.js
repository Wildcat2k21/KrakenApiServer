import dotenv from 'dotenv';
dotenv.config();
import fetch from 'node-fetch';
import { CookieJar } from 'tough-cookie';
import fetchCookie from 'fetch-cookie';
import { v4 as uuidv4 } from 'uuid';
import { nanoid } from 'nanoid';
import Other from './Other.js';

const {WriteInLogFile} = Other;

//–ú–æ–¥—É–ª—å –ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ
//–ü—Ä–∏–º–µ—á–∞–Ω–∏—è –≤—Ä–µ–º—è –ø–æ–¥–ø–∏—Å–æ–∫ –≤ unix –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥–∞—Ö, –ø–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –º–∞—Å—Å–∏–≤
//–ú–µ—Ç–æ–¥ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –≤—ã–∑—ã–≤–∞–µ—Ç —Å–≤–æ–± —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—É—é –æ—à–∏–±–∫—É
//–ú–ï–¢–û–î–´ –î–û–°–¢–£–ü–ù–´ –¢–û–õ–¨–ö–û –ü–û–°–õ–ï –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–ò –ö–û–ù–§–ò–ì–ê
//–ò–ú–ü–û–†–¢ –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–ò –í–´–ó–´–í–ê–ï–¢ –ü–†–û–ë–õ–ï–ú–£

//–ø–æ–ª—É—á–µ–Ω–∏–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
const {XUI_DASHBOARD_URL, XUI_ADMIN_LOGIN, XUI_ADMIN_PASSWD, XUI_BASE_SUB_PORT} =  process.env;
const XUI_IP_ADDR = process.env.XUI_IP_ADDR;

//–ø–æ–ª—É—á–µ–Ω–∏–µ –∫—É–∫
const jar = new CookieJar();
const fetchWithCookies = fetchCookie(fetch, jar);

class XUI_API{

    //–∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –ø–æ–¥–ø–∏—Å–∫–∏
    static inboundId = null;

    //–ø–æ–ª—É—á–µ–Ω–∏–µ –∫—É–∫–æ–≤ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
    static findAuthCookie = async () => {
        const cookies = await jar.getCookies(XUI_DASHBOARD_URL);
        //'3x-ui' - –∫—É–∫–∞ —Å–µ—Å—Å–∏–∏
        return cookies.find(cookie => cookie.key === '3x-ui');
    }

    static MakeAuthRequest = async () => {

        //–ø–æ–ª—É—á–µ–Ω–∏–µ –∫—É–∫–æ–≤ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
        const authCookie = await this.findAuthCookie();

        //–≤—ã—Ö–æ–¥–∏–º –µ—Å–ª–∏ –∫—É–∫–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –∏–º–µ—é—Ç—Å—è
        if(authCookie) return;

        const params = new URLSearchParams();
        params.append("username", XUI_ADMIN_LOGIN); // –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–π –ª–æ–≥–∏–Ω
        params.append("password", XUI_ADMIN_PASSWD); // –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–π –ø–∞—Ä–æ–ª—å

        const response = await fetchWithCookies(`${XUI_DASHBOARD_URL}/login`, {
            method: "POST",
            headers: {
                "Content-Type": "application/x-www-form-urlencoded; charset=UTF-8"
            },
            body: params.toString(),
        });

        const data = await response.json();

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∑–∞–ø—Ä–æ—Å –ø—Ä–æ—à–µ–ª —É—Å–ø–µ—à–Ω–æ
        if(!data.success) throw new Error("–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –Ω–µ —É–¥–∞–ª–∞—Å—å");
        
        return data;
    }

    //–ø–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞
    static GetNewCert = async () => {

        //–ø–æ–ª—É—á–µ–Ω–∏–µ –∫—É–∫–æ–≤ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
        const authCookie = await this.findAuthCookie();

        //–≤—ã—Ö–æ–¥–∏–º –µ—Å–ª–∏ –∫—É–∫–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –∏–º–µ—é—Ç—Å—è
        if(!authCookie) throw new Error("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç. –ö—É–∫–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –Ω–µ –Ω–∞–∏ÃÜ–¥–µ–Ω—ã");

        const response = await fetchWithCookies(`${XUI_DASHBOARD_URL}/server/getNewX25519Cert`, {
            method: "POST",
            headers: {
                "Content-Type": "application/x-www-form-urlencoded; charset=UTF-8",
            }
        });

        const data = await response.json();

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∑–∞–ø—Ä–æ—Å –ø—Ä–æ—à–µ–ª —É—Å–ø–µ—à–Ω–æ
        if(!data.success) throw new Error("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç");

        // –ü–æ–ª—É—á–∏–º –¥–∞–Ω–Ω—ã–µ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞
        return data;
    }

    //–∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Ä–≤–µ—Ä–∞
    static InitXrayConfig = async () => {

        //–∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è
        await this.MakeAuthRequest();

        //–ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –∏–Ω—Å—Ç–∞–Ω—Å–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
        const inboundResponse = await fetchWithCookies(`${XUI_DASHBOARD_URL}/panel/inbound/list`, {
            method: "POST",
            headers: {
                "Content-Type": "application/x-www-form-urlencoded; charset=UTF-8"
            }
        });

        const inboundData = await inboundResponse.json();

        if(inboundData.obj.length){
            this.inboundId = inboundData.obj[0].id;
            return WriteInLogFile("–ù–∞–π–¥–µ–Ω–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è ‚ÑπÔ∏è");
        }

        const config_json = await import("../x-ray-config.json", {
            assert: { type: "json" },
        });

        //–ø–æ–ª—É—á–µ–Ω–∏–µ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞
        const {privateKey, publicKey} = (await this.GetNewCert()).obj;

        //—É—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ —Å–µ—Ä–≤–µ—Ä–∞
        const config = {...config_json.default}
        config.streamSettings.realitySettings.privateKey = privateKey;
        config.streamSettings.realitySettings.publicKey = publicKey;
        config.port = Number(XUI_BASE_SUB_PORT);

        //—É—Å—Ç–∞–Ω–æ–≤–∫–∞ –∫–æ—Ä–æ—Ç–∫–∏—Ö id
        // config.streamSettings.realitySettings.shortIds = [
        //     0, 0, 0, 0, 0, 0, 0, 0 
        // ].map(_ => nanoid(Math.ceil(Math.random() * 13) + 3));

        //–ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –≤ —Å—Ç—Ä–æ–∫—É
        const stringConfigParam = Object.keys(config).map(key => `${key}=${typeof config[key] === 'object' ? encodeURIComponent(JSON.stringify(config[key], null, 2)) : config[key]}`).join('&')

        //–∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ–¥–ø–∏—Å–∫–∏
        const response = await fetchWithCookies(`${XUI_DASHBOARD_URL}/panel/inbound/add`, {
            method: "POST",
            headers: {
                "Content-Type": "application/x-www-form-urlencoded; charset=UTF-8",
            },
            body: stringConfigParam
        });

        const data = await response.json();

        if(!data.success) throw new Error("–ù–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é ‚ùóÔ∏è");

        //—É—Å—Ç–∞–Ω–æ–≤–∫–∞ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
        WriteInLogFile("–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–æ üéâ");
        this.inboundId = data.obj.id;

        //–¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω—É–ª–µ–≤–æ–π –ø–æ–¥–ø–∏—Å–∫–∏
        await this.CreateUser({email: "root", totalGB: 0, expiryTime: 0});

        return data;
    }

    //—Å–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    static CreateUser = async ({email, totalGB, expiryTime}) => {

        if(!this.inboundId) throw new Error("–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ ‚ùóÔ∏è");

        console.log(7);

        //–∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è
        await this.MakeAuthRequest();

        console.log(8);

        //–æ–±—ä–µ–∫—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        const userObject = {
            id: this.inboundId,
            settings: {
                clients: [{
                    id: uuidv4(),
                    flow: "xtls-rprx-vision",
                    email,
                    limitIp: 0,
                    totalGB,
                    expiryTime,
                    enable: true,
                    tgId: "",
                    subId: nanoid(16),
                    reset: 0
                }]
            }
        }

        console.log(9);

        //–ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –≤ —Å—Ç—Ä–æ–∫—É
        const stringUserParam = Object.keys(userObject).map(param => `${param}=${encodeURIComponent(JSON.stringify(userObject[param], null, 2))}`).join('&');

        //—Å–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        const response = await fetchWithCookies(`${XUI_DASHBOARD_URL}/panel/inbound/addClient`, {
            method: "POST",
            headers: {
                "Content-Type": "application/x-www-form-urlencoded; charset=UTF-8",
            },
            body: stringUserParam
        });

        console.log(10);

        const data = await response.json();

        if(!data.success) throw new Error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è "${email}" ‚ùóÔ∏è`);

        console.log(11);

        //–≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Å–æ–∑–¥–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        WriteInLogFile(`–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å "${email}" —Å–æ–∑–¥–∞–Ω üéâ`);
        const thisClient = await this.GetUser(email);

        console.log(12);

        return thisClient[0];
    }

    //—Å–æ–∑–¥–∞–Ω–∏–µ —Å—Ç—Ä–æ–∫–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    static CreateConnection = (client, streamSettings, protocol, port, remark) => {

        console.log(19);

        //–ø–∞—Ä–∞–º–µ—Ç—Ä—ã —Å—Ç—Ä–æ–∫–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
        const connectionParams = {
            security: streamSettings.security,
            pbk: streamSettings.realitySettings.settings.publicKey,
            fp: streamSettings.realitySettings.settings.fingerprint,
            sni: streamSettings.realitySettings.serverNames[0],
            sid: streamSettings.realitySettings.shortIds[0],
            spx: streamSettings.realitySettings.settings.spiderX,
            flow: client.flow
        }

        //—Å–æ–∑–¥–∞–Ω–∏ —Å—Ç—Ä–æ–∫–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
        const connection = `${protocol}://${client.id}@${XUI_IP_ADDR}:${port}?type=${streamSettings.network}&${Object.keys(connectionParams).map(key => `${key}=${encodeURIComponent(connectionParams[key])}`).join('&')}#${encodeURI(`${remark} - ${client.email}`)}`;

        console.log(20);
        return connection;
    }

    //–ø–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    static GetUser = async (email) => {

        if(!this.inboundId) throw new Error("–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ ‚ùóÔ∏è");

        console.log(13);

        //–∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è
        await this.MakeAuthRequest();

        console.log(14);

        //–ø–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        const response = await fetchWithCookies(`${XUI_DASHBOARD_URL}/panel/inbound/list`, {
            method: "POST",
            headers: {
                "Content-Type": "application/x-www-form-urlencoded; charset=UTF-8"
            }
        });

        console.log(15);

        const data = await response.json();

        console.log(16);

        //–ø—Ä–æ–≤–µ—Ä–∫–∞ —É—Å–ª–æ–≤–∏—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        if(data.success){
            const clients = JSON.parse(data.obj[0].settings).clients;
            const streamSettings = JSON.parse(data.obj[0].streamSettings);
            const protocol = data.obj[0].protocol;
            const remark = data.obj[0].remark;
            const port = data.obj[0].port;

            //–≤–æ–∑–≤—Ä–∞—Ç –æ–¥–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            if(email) {

                //–∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
                const current = clients.find(c => c.email === email);

                console.log(17);

                return data.obj[0].clientStats.filter(client => client.email === email).map(client => ({
                    email: client.email,
                    data_limit: client.total,
                    used_traffic: client.up + client.down,
                    expire: Math.ceil(current.expiryTime / 1000),
                    uid: current.id,
                    connection_string: this.CreateConnection(current, streamSettings, protocol, port, remark)
                }));
            }

            //–≤–æ–∑–≤—Ä–∞—Ç –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
            return data.obj[0].clientStats.map(client => {

                const current = clients.find(c => c.email === client.email);

                console.log(18);

                return {
                    email: client.email, //–∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                    data_limit: client.total, //—Ç—Ä–∞—Ñ–∏–∫ –ø–æ –ø–æ–¥–ø–∏—Å–∫–µ
                    used_traffic: client.up + client.down, //–∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ —Ç—Ä–∞—Ñ–∏–∫–∞ –≤ –±–∞–π—Ç–∞—Ö
                    expire: Math.ceil(current.expiryTime / 1000),
                    uid: current.id,
                    connection_string: this.CreateConnection(current, streamSettings, protocol, port, remark)
                }
            });            
        }
    }

    //—É–¥–∞–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–ø–æ—Å–ª–µ–¥–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å —É–¥–∞–ª–µ–Ω)
    static DeleteUser = async (email) => {
        
        if(!this.inboundId) throw new Error("–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ ‚ùóÔ∏è");

        //–∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è
        await this.MakeAuthRequest();

        //–ø–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–≤–∞–æ—Ç–µ–ª–µ
        const currentUser = await this.GetUser(email);

        //–ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        if(!currentUser.length) return;

        const user_id = currentUser[0].uid;

        //—É–¥–∞–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        const response = await fetchWithCookies(`${XUI_DASHBOARD_URL}/panel/inbound/${this.inboundId}/delClient/${user_id}`, {
            method: "POST",
            headers: {
                "Content-Type": "application/x-www-form-urlencoded; charset=UTF-8",
            }
        });

        const data = await response.json();

        if(!data.success) throw new Error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è "${email}" ‚ùóÔ∏è`);

        //–≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        WriteInLogFile(`–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å "${email}" —É–¥–∞–ª–µ–Ω üéâ`);
        return data;
    }
}

export default XUI_API;